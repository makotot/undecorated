{"version":3,"sources":["webpack:///./src/components/paragraph.tsx","webpack:///./src/components/list.tsx","webpack:///./src/components/text-link.tsx","webpack:///./src/pages/about.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/wrapper.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/global-style.tsx","webpack:///./src/components/seo.tsx","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.tsx","webpack:///./src/components/main.tsx","webpack:///./src/components/footer.tsx","webpack:///./src/components/navigation.tsx","webpack:///./src/components/drawer.tsx","webpack:///./src/components/layout.tsx","webpack:///./src/components/code.tsx","webpack:///./src/components/code-block.tsx"],"names":["Paragraph","styled","p","List","ul","Item","li","style","StyledAnchor","a","StyledLink","Link","TextLink","to","href","children","AboutPage","title","Block","Element","lang","code","loader","enqueue","React","createContext","StyledWrapper","div","Wrapper","m","module","exports","require","default","globalStyle","Object","keys","spaces","map","s","join","GlobalStyle","createGlobalStyle","SEO","description","site","meta","metaDescription","siteMetadata","htmlAttributes","name","content","titleTemplate","defaultTitle","rel","defaultProps","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json","StyledHeader","header","Heading","h1","SubHeading","Menu","useContext","AppContext","dispatch","state","onClick","e","preventDefault","type","isOpened","HeaderInner","GutterCol","Header","size","StyledMain","main","Main","StyledFooter","InlineCentered","Footer","target","Navigation","NavHeading","h2","NavHeadingLink","DrawerBackground","props","isHidden","StyledDrawer","Drawer","Layout","CodeBody","CodeButtonFrame","CopyButton","button","Copied","CopiedItem","Code","body","clipboard","useClipboard","copiedTimeout","copy","useCallback","copied","Pre","pre","CodeBlock","language","theme","className","tokens","getLineProps","getTokenProps","data-body-scroll-lock-ignore","line","i","key","token"],"mappings":"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","file":"component---src-pages-about-tsx-b133557a95dc12286b2f.js","sourcesContent":["import styled from 'styled-components'\n\nconst Paragraph = styled.p`\n  line-height: 2;\n`\n\nexport {\n  Paragraph,\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst List = styled.ul`\n  padding: 1rem;\n`\n\nconst Item = styled.li`\n  list-style-type: disc;\n  line-height: 2rem;\n`\n\nexport {\n  List,\n  Item,\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport styled from 'styled-components'\n\nconst style = `\n  text-decoration: underline;\n\n  &:hover {\n    text-decoration: none;\n  }\n`\n\nconst StyledAnchor = styled.a`\n  ${ style }\n`\n\nconst StyledLink = styled(Link)`\n  ${ style }\n`\n\ntype Props = {\n  to?: string,\n  href?: string,\n}\n\nconst TextLink: React.FC<Props> = ({ to = '#', href, children }) => (\n  href ? <StyledAnchor href={ href }>{ children }</StyledAnchor> : <StyledLink to={ to }>{ children }</StyledLink>\n)\n\nexport {\n  TextLink,\n}\n","import React from 'react'\nimport SEO from '../components/seo'\nimport { GlobalStyle } from '../components/global-style'\nimport { Wrapper } from '../components/wrapper'\nimport Layout from '../components/layout'\nimport { AppProvider } from '../context/app-context'\nimport { CodeBlock } from '../components/code-block'\nimport { Paragraph } from '../components/paragraph'\nimport { List, Item } from '../components/list'\nimport { GutterRow } from 'undecorated'\nimport { TextLink } from '../components/text-link'\n\nconst AboutPage = () => (\n  <>\n    <GlobalStyle />\n    <SEO title=\"About\" />\n    <AppProvider>\n      <Layout>\n        <Wrapper>\n          <GutterRow.Block>\n            <GutterRow.Element>\n              <Paragraph><TextLink to=\"/\">Undecorated</TextLink> is Collection of reusable CSS layout pattern.</Paragraph>\n              <br />\n              <Paragraph>I made Undecorated mainly for the following two purposes.</Paragraph>\n              <List>\n                <Item>To be able to browse a variety of reusable CSS layout patterns and make them available for instant copy and paste.</Item>\n                <Item>Just import it with npm so that you can create the layout you want.</Item>\n              </List>\n              <Paragraph>There are multiple sites that list layout patterns in grid and sites that introduce layout patterns in flexbox, but I could not find any sites that could view various layout patterns (regardless of properties such as flexbox, grid, table, etc) .\n    <br />So I wanted to create a site where I could browse various CSS layout patterns.</Paragraph>\n              <Paragraph>In addition, I want to make those layout patterns available anywhere just by <code>import</code>(For now with <TextLink href=\"https://styled-components.com\">styled-components</TextLink>).</Paragraph>\n              <Paragraph>For example, if you want to center an element vertically and horizontally, you can do it by just following.</Paragraph>\n            </GutterRow.Element>\n            <GutterRow.Element>\n<CodeBlock\n  lang=\"jsx\"\n  code={\n`\nimport { Centered } from 'undecorated'\n\n<Centered>\n  <SomethingYouWantToCenter />\n</Centered>\n`\n}\n/>\n            </GutterRow.Element>\n            <GutterRow.Element>\n              <Paragraph>Unlike the existing flexbox and grid utility libraries that leave the layout to the user, it only provides patterns that achieve a specific CSS layout.</Paragraph>\n            </GutterRow.Element>\n          </GutterRow.Block>\n        </Wrapper>\n      </Layout>\n    </AppProvider>\n  </>\n)\n\nexport default AboutPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledWrapper = styled.div`\n  max-width: 980px;\n  min-width: 320px;\n  margin: 0 auto;\n  padding: 0 1rem;\n`\n\nconst Wrapper: React.SFC = ({ children }) => (\n  <StyledWrapper>{ children }</StyledWrapper>\n)\n\nexport {\n  Wrapper,\n}","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import { createGlobalStyle } from 'styled-components'\nimport { spaces } from 'undecorated-tokens'\n\nconst createSpaces = () => `\n  ${\n    Object.keys(spaces).map((s) => {\n      return `--spaces-${ s }: ${ spaces[s] }rem;`\n    }).join('')\n  }\n`\n\nconst globalStyle = `\n  :root {\n    --base-font-size: 16px;\n\n    ${ createSpaces() }\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n\n  *::before, *::after {\n    box-sizing: inherit;\n  }\n\n  html {\n    font-size: var(--base-font-size);\n    font-weight: 400;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body {\n    width: 100%;\n    margin: 0;\n    font-family: 'Source Sans Pro', -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif;\n    line-height: 1.25;\n    background-color: #fff;\n    color: #222;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    margin: 0;\n  }\n\n  p {\n    margin: 0;\n  }\n\n  ul, ol {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n  }\n\n  button {\n    border: 0;\n    cursor: pointer;\n    -webkit-appearance: none;\n  }\n\n  a {\n    color: inherit;\n    text-decoration: none;\n  }\n\n  pre {\n    margin: 0;\n  }\n\n  .dummy {\n    display: block;\n    padding: 2rem;\n    background-color: rgba(190, 170, 255, 0.5);\n    border: 2px solid #7e91ff;\n  }\n\n  .dummy-inline {\n    display: inline;\n    background-color: rgba(190, 170, 255, 0.5);\n    color: #7e91ff;\n    font-weight: bold;\n    border: 0;\n  }\n\n  .dummy-wrapper {\n    width:100%;\n    height: 10rem;\n  }\n\n  .dummy-background {\n    width: 100%;\n    height: 100%;\n  }\n`\n\nconst GlobalStyle = createGlobalStyle`${ globalStyle }`\n\nexport {\n  GlobalStyle,\n  globalStyle,\n}\n","import React from \"react\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }: { description: string, lang: string, meta: any[], title: string }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={ site.siteMetadata.title }\n      meta={[\n        {\n          name: 'description',\n          content: metaDescription,\n        },\n        {\n          name: 'google-site-verification',\n          content: 'PHc2RN1kqWrlcCNtsmrI53TDAeZ72egGJbL2xhMl_vc',\n        },\n      ]}\n      titleTemplate={`${ site.siteMetadata.title }`}\n      defaultTitle={ site.siteMetadata.title }\n    >\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600&display=swap\" />\n    </Helmet>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n  title: '',\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React, { useContext, ReactNode } from 'react'\nimport { AppContext } from '../context/app-context'\nimport styled from 'styled-components'\nimport { Wrapper } from './wrapper'\nimport { GutterRow, Isorated, GutterCol } from 'undecorated'\nimport { Link } from 'gatsby'\nimport { FiMenu } from 'react-icons/fi'\n\nconst StyledHeader = styled.header`\n  padding: 1.25rem 0;\n  background-color: #fff;\n  border-bottom: 1px solid #ccc;\n`\n\nconst Heading = styled.h1`\n  margin: 0;\n  color: #333;\n  font-size: 1rem;\n  font-weight: 500;\n  line-height: 1.25;\n  letter-spacing: 0.1rem;\n  text-transform: uppercase;\n`\n\nconst SubHeading = styled.p`\n  color: #444;\n  font-size: 0.75rem;\n  font-weight: 300;\n  letter-spacing: 0.05rem;\n`\n\nconst Menu = () => {\n  const { state, dispatch } = useContext(AppContext)\n  const openDrawer = (e: React.MouseEvent) => {\n    e.preventDefault()\n    dispatch({\n      type: 'toggleDrawer',\n      isOpened: true,\n    })\n  }\n\n  return (\n    <a href=\"#\" onClick={ openDrawer }>\n      <FiMenu />\n    </a>\n  )\n}\n\nconst HeaderInner = styled(GutterCol.Block)`\n  align-items: center;\n`\n\ntype HeaderProps = {\n  title: string,\n  children?: ReactNode,\n}\n\nconst Header: React.SFC<HeaderProps> = ({ title }) => {\n  return (\n    <StyledHeader>\n      <Wrapper>\n        <HeaderInner>\n          <GutterCol.Element>\n            <Menu />\n          </GutterCol.Element>\n          <GutterCol.Element>\n            <GutterRow.Block size=\"xs\">\n              <GutterRow.Element>\n                <Heading><Link to=\"/\">undecorated</Link></Heading>\n              </GutterRow.Element>\n              <GutterRow.Element>\n                <SubHeading>Collection of reusable CSS layout pattern</SubHeading>\n              </GutterRow.Element>\n            </GutterRow.Block>\n          </GutterCol.Element>\n        </HeaderInner>\n      </Wrapper>\n    </StyledHeader>\n  )\n}\n\nexport {\n  Header,\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledMain = styled.main`\n  padding: 2rem 0 1rem;\n`\n\nconst Main: React.SFC = ({ children }) => <StyledMain>{ children }</StyledMain>\n\nexport {\n  Main,\n}\n","import React, { useContext, ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { FiGithub } from 'react-icons/fi'\nimport { InlineCentered } from 'undecorated'\n\nconst StyledFooter = styled(InlineCentered.Block)`\n  padding: 1rem 0;\n`\n\nconst Link = styled.a`\n  color: #222;\n`\n\nconst Footer = () => (\n  <footer>\n    <StyledFooter>\n      <Link href=\"https://github.com/makotot/undecorated/\" target=\"_blank\" rel=\"noopener\">\n        <FiGithub />\n      </Link>\n    </StyledFooter>\n  </footer>\n)\n\nexport {\n  Footer,\n}\n","import React, { ReactNode } from 'react'\nimport { GutterRow } from 'undecorated'\nimport { Link } from 'gatsby'\n\ninterface NavigationProps {\n  children?: ReactNode,\n}\n\nconst Navigation: React.SFC<NavigationProps> = ({ children }) => {\n  return (\n    <nav>\n      <GutterRow.Block size=\"l\">\n        <GutterRow.Element>\n          <Link to=\"/about/\">About</Link>\n        </GutterRow.Element>\n      </GutterRow.Block>\n    </nav>\n  )\n}\n\nexport { Navigation }\n","import React, { useContext, ReactNode } from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'gatsby'\nimport { AppContext } from '../context/app-context'\nimport { GutterRow } from 'undecorated'\n\nconst NavHeading = styled.h2`\n  font-size: 0.875rem;\n  font-weight: 500;\n  text-transform: uppercase;\n`\n\nconst NavHeadingLink = styled(Link)`\n  color: #555;\n  text-decoration: none;\n`\n\ninterface DrawerBackgroundProps {\n  isHidden: boolean\n}\n\nconst DrawerBackground = styled.a`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: rgba(68, 68, 68, 0.25);\n  z-index: 3;\n  transition: all 0.3s ease;\n  display: ${ (props: DrawerBackgroundProps) => props.isHidden ? 'none' : '' };\n  opacity: ${ (props: DrawerBackgroundProps) => props.isHidden ? 0 : 1 };\n`\n\ninterface StyledDrawerProps {\n  isHidden: boolean,\n}\n\nconst StyledDrawer = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  height: 100%;\n  padding: 2rem 10vw 2rem 2rem;\n  background-color: #fff;\n  color: #444;\n  z-index: 4;\n  transition: all 0.3s ease;\n  transform: ${ (props: StyledDrawerProps) => props.isHidden ? 'translateX(-100%)' : 'translateX(0)' };\n`\n\ninterface DrawerProps {\n  children?: ReactNode,\n}\n\nconst Drawer: React.SFC<DrawerProps> = ({ children }) => {\n  const { state, dispatch } = useContext(AppContext)\n  const closeDrawer = (e: any) => {\n    e.preventDefault()\n    dispatch({\n      type: 'toggleDrawer',\n      isOpened: false,\n    })\n  }\n\n  return (\n    <>\n      <DrawerBackground onClick={ closeDrawer } isHidden={ !state.isOpened } />\n      <StyledDrawer isHidden={ !state.isOpened }>\n        <GutterRow.Block size=\"xl\">\n          <GutterRow.Element>\n            <NavHeading>\n              <NavHeadingLink to=\"/\">undecorated</NavHeadingLink>\n            </NavHeading>\n          </GutterRow.Element>\n          <GutterRow.Element>\n            { children }\n          </GutterRow.Element>\n        </GutterRow.Block>\n      </StyledDrawer>\n    </>\n  )\n}\n\nexport { Drawer }\n","import { useStaticQuery, graphql } from \"gatsby\"\nimport React from 'react'\nimport { Header } from './header'\nimport { Wrapper } from './wrapper'\nimport { Main } from './main'\nimport { Footer } from './footer'\nimport { StickyFooter } from \"undecorated\"\nimport { Navigation } from \"./navigation\"\nimport { Drawer } from \"./drawer\"\n\nconst Layout: React.SFC = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <StickyFooter.Block>\n        <Header title={ 'Undecorated Collection' } />\n        <Drawer>\n          <Navigation />\n        </Drawer>\n        <Main>\n          { children }\n        </Main>\n        <StickyFooter.Element>\n          <Wrapper>\n            <Footer />\n          </Wrapper>\n        </StickyFooter.Element>\n      </StickyFooter.Block>\n    </>\n  )\n}\n\nexport default Layout\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport { useClipboard } from 'use-clipboard-copy'\nimport { FiCopy, FiCheck } from 'react-icons/fi'\nimport { GutterCol } from 'undecorated'\n\nconst CodeBody = styled.div`\n  position: relative;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 0.875rem;\n`\n\nconst CodeButtonFrame = styled.div`\n  position: absolute;\n  top: 1rem;\n  right: 1rem;\n  z-index: 1;\n`\n\nconst CopyButton = styled.button`\n  padding: 0.5rem;\n  border: 0;\n  background-color: #fff;\n  color: #444;\n  font-size: 1rem;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background-color: #444;\n    color: #fff;\n  }\n`\n\nconst Copied = styled(GutterCol.Block)`\n  align-items: center;\n  padding: 0.5rem;\n  border: 0;\n  background-color: #fff;\n  color: #3c59ff;\n  font-size: 1rem;\n`\n\nconst CopiedItem = styled(GutterCol.Element)`\n  display: flex;\n`\n\ninterface CodeProps {\n  code?: string,\n  body: React.ReactNode,\n}\n\nconst Code: React.SFC<CodeProps> = ({ code, body }) => {\n  const clipboard = useClipboard({\n    copiedTimeout: 3000,\n  })\n\n  const copy = useCallback(() => {\n    clipboard.copy(code)\n  }, [clipboard.copy, code])\n\n  return (\n    <>\n      <CodeBody>\n        {\n          code\n          &&\n          <CodeButtonFrame>\n            {\n              clipboard.copied\n              ?\n                <Copied size=\"xs\">\n                  <CopiedItem>\n                    <FiCheck />\n                  </CopiedItem>\n                  <CopiedItem>\n                    Copied!\n                  </CopiedItem>\n                </Copied>\n              :\n                <CopyButton onClick={ copy }>\n                  <FiCopy />\n                </CopyButton>\n            }\n          </CodeButtonFrame>\n        }\n        { body }\n      </CodeBody>\n    </>\n  )\n}\n\nexport {\n  Code,\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport Highlight, { defaultProps, Language } from 'prism-react-renderer'\nimport theme from 'prism-react-renderer/themes/github'\nimport { Code } from './code'\n\nconst Pre = styled.pre`\n  overflow-y: auto;\n  -webkit-overflow-scrolling: touch;\n  padding: 0.5rem 4rem 0.5rem 0.5rem;\n  min-height: 4rem;\n`\n\nconst CodeBlock = ({ lang, code }: { lang: Language, code: string }) => {\n  return (\n    <Code\n      code={ code }\n      body={\n        <Highlight { ...defaultProps } code={ code } language={ lang } theme={ theme }>\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <Pre className={ className } style={ style } data-body-scroll-lock-ignore=\"1\">\n              {\n                tokens.map((line, i) => (\n                  <div { ...getLineProps({ line, key: i }) }>\n                    {\n                      line.map((token, key) => (\n                        <span { ...getTokenProps({ token, key }) } />\n                      ))\n                    }\n                  </div>\n                ))\n              }\n            </Pre>\n          )}\n        </Highlight>\n      }\n    />\n  )\n}\n\nexport {\n  CodeBlock,\n}\n"],"sourceRoot":""}